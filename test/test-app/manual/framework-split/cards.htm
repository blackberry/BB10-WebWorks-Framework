<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>blackberry.invoke.card manual tests</title>
</head>
<script src="local:///js/webworks.js" type="text/javascript"></script>
<body>

    <script type="text/javascript">
        function invokeCard(mode) {
            blackberry.invoke.card.invokeCamera(mode, function (path) {
                        alert("saved "+ path);
                    },
                    function (reason) {
                        alert("cancelled " + reason);
                    },
                    function (error) {
                        if (error) {
                            alert("invoke error "+ error);
                        } else {
                            console.log("invoke success " );
                        }
                    }
                );
        }
        //pick a file of picture or music type
        function invokeFileInPickerMode0() {
            var details = {
                    mode: blackberry.invoke.card.FILEPICKER_MODE_PICKER,
                    type: [blackberry.invoke.card.FILEPICKER_TYPE_PICTURE, blackberry.invoke.card.FILEPICKER_TYPE_MUSIC]
                };
            invokeFilePicker(details);
        }
      //pick a file of picture with image crop enabled
        function invokeFileInPickerMode1() {
            var details = {
                    mode: blackberry.invoke.card.FILEPICKER_MODE_PICKER,
                    type: [blackberry.invoke.card.FILEPICKER_TYPE_PICTURE],
                    imageCrop: true
                };
            invokeFilePicker(details);
        }
      //pick a file using a filter, of only jpg and mp4
        function invokeFileInPickerMode2() {
            var details = {
                    mode: blackberry.invoke.card.FILEPICKER_MODE_PICKER,
                    filter: ["*.jpg", "*.mp4"]
                };
            invokeFilePicker(details);
        }
        //open file picker in GridView and sort by descending name
        function invokeFileInPickerMode3() {
            var details = {
                    mode: blackberry.invoke.card.FILEPICKER_MODE_PICKER,
                    viewMode: blackberry.invoke.card.FILEPICKER_VIEWER_MODE_GRID,
                    sortBy: blackberry.invoke.card.FILEPICKER_SORT_BY_NAME,
                    sortOrder: blackberry.invoke.card.FILEPICKER_SORT_ORDER_DESCENDING
                };
            invokeFilePicker(details);
        }


        //open file picker with a title in viewMode list
      function invokeFileInPickerMode4() {
            var details = {
                    mode: blackberry.invoke.card.FILEPICKER_MODE_PICKER,
                    viewMode: blackberry.invoke.card.FILEPICKER_VIEWER_MODE_LIST,
                    title: "Some Custom Title"
                };
            invokeFilePicker(details);
        }
        //open file picker starting at two directories - APP HOME and SHARED FOLDER
      function invokeFileInPickerMode5() {
            var details = {
                    mode: blackberry.invoke.card.FILEPICKER_MODE_PICKER,
                    directory: [blackberry.io.home, blackberry.io.sharedFolder]
                };
            invokeFilePicker(details);
        }
     //open file picker in multiple mode starting at two directories
      function invokeFileInPickerMode6() {
            var details = {
                    mode: blackberry.invoke.card.FILEPICKER_MODE_PICKER_MULTIPLE,
                    directory: [blackberry.io.home, blackberry.io.sharedFolder]
                };
            invokeFilePicker(details);
        }
   //open file picker in saver mode with 1 directory. Should open parent of App Home
      function invokeFileInPickerMode7() {
            var details = {
                    mode: blackberry.invoke.card.FILEPICKER_MODE_SAVER,
                    directory: [blackberry.io.home]
                };
            invokeFilePicker(details);
        }
 //open file picker in saver mode and allow overwrite - try to save already saved file
      function invokeFileInPickerMode8() {
            var details = {
                    mode: blackberry.invoke.card.FILEPICKER_MODE_SAVER,
                    directory: [blackberry.io.sharedFolder],
                    allowOverwrite: true
                };
            invokeFilePicker(details);
        }
 //open file picker in multiple saver mode to save a folder path
      function invokeFileInPickerMode9() {
            var details = {
                    mode: blackberry.invoke.card.FILEPICKER_MODE_SAVER_MULTIPLE,

                };
            invokeFilePicker(details);
        }

//open file picker in saver mode with single file name
      function invokeFileInPickerMode10() {
            var details = {
                    mode: blackberry.invoke.card.FILEPICKER_MODE_SAVER,
                    defaultSaveFileNames: ["file1.jpg"]
                };
            invokeFilePicker(details);
        }
      //open file picker in multiple saver mode with file names and file types
        function invokeFileInPickerMode11() {
            var details = {
                    mode: blackberry.invoke.card.FILEPICKER_MODE_SAVER_MULTIPLE,
                    defaultSaveFileNames: ["file1.jpg", "file2.jpg"]
                };
            invokeFilePicker(details);
        }
        //open file picker in single  mode with a type and defaultType
         function invokeFileInPickerMode12() {
            var details = {
                    mode: blackberry.invoke.card.FILEPICKER_MODE_PICKER,
                    type: [blackberry.invoke.card.FILEPICKER_TYPE_PICTURE,
                           blackberry.invoke.card.FILEPICKER_TYPE_DOCUMENT],
                    defaultType: blackberry.invoke.card.FILEPICKER_TYPE_DOCUMENT
                };
            invokeFilePicker(details);
        }


        function invokeFilePicker(details) {
          blackberry.invoke.card.invokeFilePicker(details, function (path) {
                        alert("saved "+ path);
                    },
                    function (reason) {
                        alert("cancelled " + reason);
                    },
                    function (error) {
                        if (error) {
                            alert("invoke error "+ error);
                        } else {
                            console.log("invoke success " );
                        }
                    }
                );
        }


    function readSingleFile(evt) {
            var f = evt.target.files[0];

            if (f) {
                var r = new FileReader();
                r.onload = function(e) {
                    var contents = e.target.result;
                    document.getElementById('show').innerHTML = "Got the file.<br />"
                        +"name: " + f.name + "<br />"
                        +"type: " + f.type + "<br />"
                        +"size: " + f.size + " bytes<br />"
                        +"starts with: " + contents.substr(0, contents.indexOf("\n"));
                }
                r.readAsText(f);
            } else {
                alert("Failed to load file");
            }
        }


</script>
 <p> Steps for Testing</p>
 <p> Case 1</p>
    <p>
    	1. Click on the button below to invoke camera card in photo mode. <br/>
		2. When the camera card show - take a picture and make sure it was invoke in photo mode <br/>
	    3. An alert should pop up with the photo path when you return to app <br/>
    <input id="Button2" type="button" value="camera card in photo mode" onclick='invokeCard(blackberry.invoke.card.CAMERA_MODE_PHOTO)' />
    <br />
    <p> Case 2</p>
    <p>
        1. Same as Case1 but for video.
    <br />
    <input id="Button3" type="button" value="camera card in video mode" onclick='invokeCard(blackberry.invoke.card.CAMERA_MODE_VIDEO)' />
    <br />

    <p> Case 3</p>
    <p>
        1. Same as Case1 but for full mode.
    <br />
    <input id="Button3" type="button" value="camera card in full mode" onclick='invokeCard(blackberry.invoke.card.CAMERA_MODE_FULL)' />
    <br />
    <p> Case 4</p>
    <p>
    1. Same as Case1 but for invalid mode should default to full mode.
    <br />
    <input id="Button4" type="button" value="camera card in invalid mode" onclick='invokeCard("invalid")' />
    <br />
    <p> Case 5</p>
    <p>
        1. Same as Case5 but for undefined mode.
    <br />
    <input id="Button5" type="button" value="camera card in undefined  mode" onclick='invokeCard()' />
    <br />

    <p> Case 6 - Input field test continues to work</p>
    <p>
    	1. Click on the input field and take a picture or select a file <br/>
		2. The div at the bottom of the page will show the details of the file. <br/>
    <p>Camera<br>
    <input id="camerainput" type="file" accept="image/*" capture="camera">
    <script>
        document.getElementById('camerainput').addEventListener('change', readSingleFile, false);
    </script>
    <p> File Picker test cases </p>
    <p> Case 7</p>
    <p>
        pick a file of picture or music type
    <br />
    <input id="Button7" type="button" value="file picker card " onclick='invokeFileInPickerMode0()'/>
    <br />
    <p> Case 8</p>
    <p>
     pick a file of picture with image crop enabled
    <br />
    <input id="Button8" type="button" value="file picker card " onclick='invokeFileInPickerMode1()'/>
    <br />
    <p> Case 9</p>
    <p>
      pick a file using a filter, of only jpg and mp4
    <br />
    <input id="Button9" type="button" value="file picker card " onclick='invokeFileInPickerMode2()'/>
    <br />
    <p> Case 10</p>
    <p>
     open file picker in GridView and sort by descending name
    <br />
    <input id="Button10" type="button" value="file picker card " onclick='invokeFileInPickerMode3()'/>
    <br />
    <p> Case 11 </p>
    <p>
        open file picker with a title in viewMode list
    <br />
    <input id="Button11" type="button" value="file picker card " onclick='invokeFileInPickerMode4()'/>
    <br />
   <p> Case 12</p>
    <p>
     open file picker starting at two directories - APP HOME and SHARED FOLDER
    <br />
    <input id="Button12" type="button" value="file picker card " onclick='invokeFileInPickerMode5()'/>
    <br />
    <p> Case 13 </p>
    <p>
     open file picker in multiple mode starting at two directories
    <br />
    <input id="Button14" type="button" value="file picker card " onclick='invokeFileInPickerMode6()'/>
    <br />
    <p> Case 14 </p>
    <p>
      open file picker in saver mode with 1 directory. Should open parent of App Home
    <br />
    <input id="Button14" type="button" value="file picker card " onclick='invokeFileInPickerMode7()'/>
    <br />
    <p> Case 15 </p>
    <p>
    open file picker in saver mode and allow overwrite - try to save already saved file
    <br />
    <input id="Button15" type="button" value="file picker card " onclick='invokeFileInPickerMode8()'/>
    <br />
    <p> Case 16 </p>
    <p>
      open file picker in multiple saver mode to save a folder path
    <br />
    <input id="Button16" type="button" value="file picker card " onclick='invokeFileInPickerMode9()'/>
    <br />
    <p> Case 17 </p>
    <p>
      open file picker in saver mode with file names
    <br />
    <input id="Button17" type="button" value="file picker card " onclick='invokeFileInPickerMode10()'/>
    <br />
    <p> Case 18 </p>
    <p>
      open file picker in multiple saver mode with file names and file types
    <br />
    <input id="Button18" type="button" value="file picker card " onclick='invokeFileInPickerMode11()'/>
    <br />
    <p> Case 19 </p>
    <p>
      open file picker in single  mode with a type and defaultType
    <br />
    <input id="Button19" type="button" value="file picker card " onclick='invokeFileInPickerMode12()'/>
    <br />

    </p> <br>
    <input id="Button100" type="button" value="Back" onclick="history.back()" />
    </p>
    </p> <br>
    <div id="show" />
    </p>
    <p> Case 20 - Input field test continues to work for file picker</p>
    <p>
    	1. Click on the input field and select a file <br/>
		2. The div at the bottom of the page will show the details of the file. <br/>
    <p>File<br>
    <input id="filenput" type="file" />
    <script>
document.getElementById('fileinput').addEventListener('change', readSingleFile, false);
    </script>
</body>
</html>
